def notifyLINE(status) {
    withCredentials([string(credentialsId: 'line-notify-token-14', variable: 'TOKEN')]) { 
       def token = TOKEN
       def jobName = env.JOB_NAME
       def buildNo = env.BUILD_NUMBER
       
       def url = 'https://notify-api.line.me/api/notify'
       def message = "${jobName} Build #${buildNo} ${status} \r\n"
       sh "curl ${url} -H 'Authorization: Bearer ${token}' -F 'message=${message}'"
    }
}

pipeline {
    agent any
    options {
        ansiColor('xterm')
    }
    stages {
        stage('Pull code') {
            steps {
                checkout scm
            }
        }
        stage('Download dependency') {
            steps {
                dir('./front-end'){
                    sh 'yarn install'
                }
            }
        }
        stage('Run unit test and Generate unit test report') {
            steps {
                dir('./front-end') {
                    sh 'yarn run jest:unit:cov'
                    
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage/lcov-report",
                        reportFiles: "index.html",
                        reportName: 'Unit Test Coverage Report'
                    ]
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage",
                        reportFiles: "report.html",
                        reportName: 'Unit Test Report'
                    ]
                }
            }
        }
        stage('Run component test and Generate component test report') {
            steps {
                dir('./front-end'){
                    sh 'yarn run jest:component:cov'
        
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: './coverage/lcov-report',
                        reportFiles: 'index.html',
                        reportName: 'Component Test Coverage Report'
                    ]
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: "./coverage",
                        reportFiles: "report.html",
                        reportName: 'Component Test Report'
                    ]
                }
            }
        }
        stage('Build and Deploy') {
            steps {
                echo 'step : deploy'
                withCredentials([string(credentialsId: 'frontend-server', variable: 'HOST'), string(credentialsId: 'team-14-username', variable: 'USERNAME'), string(credentialsId: 'team-14-password', variable: 'PASSWORD')]) {
                    script {
                        def remote = [:]
                        remote.name = "team-14-frontend"
                        remote.host = "${HOST}"
                        remote.user = "${USERNAME}"
                        remote.password = "${PASSWORD}"
                        remote.allowAnyHosts = true
                        sshCommand remote: remote, command: "git clone -b main https://github.com/pspapleng/Project-SW-dev-tool-env-14.git team-14-frontend"
                        sshCommand remote: remote, command: "cd team-14-frontend && VERSION=\$(git describe --tags --abbrev=0) docker-compose -f ./docker-compose-build.yaml build front_end"
                        sshCommand remote: remote, command: "cd team-14-frontend && VERSION=\$(git describe --tags --abbrev=0) docker-compose -f ./docker-compose-deploy.yaml up -d front_end"
                        sshCommand remote: remote, command: "rm -r team-14-frontend"
                    }
                }        
            }
        }
        stage('Run E2E test and Generate E2E test report') {
            steps {
                dir('./front-end'){
                    sh 'mkdir -p ./.nyc_output'
                    sh 'yarn cover:e2e'
                    publishHTML target: [
                        allowMissing: false,
                        alwaysLinkToLastBuild: false,
                        keepAll: true,
                        reportDir: './coverage/lcov-report',
                        reportFiles: 'index.html',
                        reportName: 'E2E Test Coverage Report'
                    ]
                }
            }
        }
    }
    post{
        success{
            notifyLINE("succeed")
        }
        failure{
            notifyLINE("failure")
        }
    }
}